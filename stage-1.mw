Here we start stage1, the next step.  The implementation in stage 0
allows only us to seperate comments from codes.  It's not a big improvement,
but at least let us get rid of the pain from formatting code, so that
we can write this stage in a pleasure way like writing an essay.

We have mentioned the concept of code chunks, like any other objects,
code chunks also consist of name and value.  This stage's object is developing
a new strategy at combining code chunks.  The new strategy gives code chunks
names, and let code chunks be able to be refered by their name.  Naming
code chunks is a little inaccurate, as you could observe in this
stage, all code chunks have a common name "stage 1", does it mean that
the code chunk "stage 1" has been defined once by once? No, we regard
the all code chunks as an entity.  We have to introduce a new concept here,
I call it node.  All code chunks with a same name are simply concated one by one
to form the node of that name.  What we are going to name are nodes rather than code chunks.
The stage1 has only one node, named "stage 1".

The tangle procedure now has an extra argument, since multiple nodes can be
defined.  We have to specify the node's name we want to extract from MWEB source file.
Beside that, I insert a parsing procedure here, because the grammar will become
more and more complicated from now on, it's a good idea to build the parsing
procedures at this point.
@[stage 1@]
(define (tangle file node)
  ; tangle-node is just another form of tangle, use parsed file
  ; rather than file as argument
  (tangle-node (extract-code-chunks
		(parse-content
		 (get-content file)))
	       node))
@

MIT-scheme contains a useful library to do parsing.
@[stage 1@]
(load-option '*parser)
@

As you might guess, the code chunks used in this stage also follow the new
syntax defined by this stage, but add something new inside code chunks.
Let's define the elements of MWEB stage1 one by one.

TEXT: the comments are of this type. The character '@' will be used as escape
character in future. Even it doesn't have much power in this stage, I decide to
treat it specially.
@[stage 1@]
(define-*matcher-macro text `(+ (alt "@@" (not-char #\@))))
@

NAME: the name of code chunks is of this type, its first and last character
can not be a whitespace.
@[stage 1@]
(define char-set:non-whitespace (char-set-invert char-set:whitespace))
(define-*matcher-macro name
  `(seq (char-set char-set:non-whitespace)
	(? (seq (* (not-char #\@))
		(char-set char-set:non-whitespace)))))

(define-*matcher-macro spaces `(* #\space))
@

CODE: the contents of a code chunk, unlike TEXT, "@{" and "@}" are introduced into
contents of code to reference other code chunks.  So we have a more complicated
definition.  There are further use of '@' in code chunk, but "@\n" always mean
the ending of a code chunk.
@[stage 1@]
(define-*matcher-macro code
  `(* (alt (not-char #\@)
	   (seq #\@ (not-char #\newline)))))
@

Then the parsing processes, we do not use explaining text now, just ignore them.
@[stage 1@]
(define-*parser-macro mweb-stage-1
  `(* (seq (? explain-text)
	   (encapsulate vector->list code-chunk))))

(define-*parser-macro explain-text
  `(noise text))
@

@[stage 1@]
(define-*parser-macro code-chunk
  `(seq code-chunk-title (noise "\n")
	code-chunk-content
	code-chunk-end))

(define-*parser-macro code-chunk-title
  `(seq (noise "@[") (noise spaces)
	(match name)
	(noise spaces) (noise "@]")))

(define-*parser-macro code-chunk-content
  `(match code))

(define-*parser-macro code-chunk-end
  `(noise "@\n"))
@

I prefer dealing with lists, the result of parse-content is an association list
mapping titles to contents.
@[stage 1@]
(define (parse-content content)
  (let ((parser (*parser mweb-stage-1)))
    (vector->list (parser (string->parser-buffer content)))))
@

Even though efficiency is not a main concern in building, hash table is the best choice here,
both in clarity and in efficiency.  extract-code-chunks concates the code chunks with a same name,
and saving them in a hash table.
@[stage 1@]
(define (extract-code-chunks parsed-content)
  (let ((hash-table (make-string-hash-table)))
    (for-each (lambda (chunk)
		(let* ((title (car chunk))
		       (content (cadr chunk))
		       (content-extracted
			(hash-table-ref hash-table title (lambda () ""))))
		  (hash-table-set! hash-table title
				  (string-append content-extracted content))))
	      parsed-content)
    hash-table))
@

We now need to parse references to other code chunks in code content.
This process contains recursive calling of tangle-node.  Tangling a node
means tangling all nodes it references and concating them in order.
@[stage 1@]
(define-*matcher-macro normal-code
  `(+ (alt (not-char #\@)
	   (seq #\@ (not-char #\{)))))

(define-*parser-macro node-content
  `(* (alt (match normal-code)
	   (map (lambda (node) (tangle-node nodes node)) reference))))

(define-*parser-macro reference
  `(seq (noise (seq #\@ #\{ spaces))
	(match name)
	(noise (seq spaces #\@ #\}))))

(define (tangle-node nodes node)
  (let ((node-content (hash-table-ref nodes node (lambda () "")))
	(parser (*parser node-content)))
    (fold-right string-append "" (vector->list (parser (string->parser-buffer node-content))))))
@

Build MWEB(prototype).
@[stage 1@]
(call-with-output-file "mweb-proto.scm"
  (lambda (port)
    (write-string (tangle "mweb-proto.mw" "mweb prototype") port)))
@

Script wrapper of MWEB(prototype).
@[stage 1@]
(call-with-output-file "mweb-proto"
  (lambda (port)
    (write-string (tangle "wrapper.mw" "wrapper of mweb-proto") port)))
@

