Here we start stage1, the next step.  The implementation in stage 0
allows only us to seperate comments from codes.  It's not a big improvement,
but at least let us get rid of the pain from formatting code, so that
we can write this stage in a pleasure way like writing a normal article.

We have mentioned the concept of code chunks, like any other objects,
code chunks can also have name and value.  This stage's object is developing
a new strategy at combining code chunks.  The new strategy gives code chunks
names, and let code chunks be able to be refered by their name.

The tangle procedure now has an extra step, we do not extract chunks
directly from string now, we parse the string first.
@[stage 1@]
(define (tangle file)
  (combine
   (extract-code-chunks
    (parse-contents
     (get-contents file)))))
@

Because the grammar will become more and more complicated from now on,
it's a good idea to build the parsing procedures at this point.
MIT-scheme contains a useful library for this purpose.
@[stage 1@]
(load-option '*parser)
@

As you might guess, the code chunks used in this stage also follow the new
syntax defined by this stage, but add something new inside code chunks.
Let's define the elements of MWEB stage1 one by one.

TEXT: the comments is of this type, since we do not have any
control sequence now, for convenience, we simply define it as this.
@[stage 1@]
(define-*matcher-macro text
  `(+ (not-char #\@)))
@

NAME: the name of code chunks is of this type.
@[stage 1@]
(define-*matcher-macro name
  `(seq (char-set char-set:alphanumeric)
	(? (seq (* (not-char #\@))
		(char-set char-set:alphanumeric)))))

(define-*matcher-macro spaces
  `(* #\space))
@

CODE: the contents of a code chunk.
@[stage 1@]
(define-*matcher-macro code
  `(* (alt (not-char #\@)
	   (seq #\@ (not-char #\newline)))))
@

Then build the parse processes, we do not use explaining text now, just ignore them.
@[stage 1@]
(define-*parser-macro mweb-stage-1
  `(* (seq (? explain-text)
	   (encapsulate vector->list code-chunk))))

(define-*parser-macro explain-text
  `(noise text))
@

@[stage 1@]
(define-*parser-macro code-chunk
  `(seq code-chunk-title (noise "\n")
	code-chunk-content
	code-chunk-end))

(define-*parser-macro code-chunk-title
  `(seq (noise "@[")
	(noise spaces)
	(match name)
	(noise spaces)
	(noise "@]")))

(define-*parser-macro code-chunk-content
  `(match code))

(define-*parser-macro code-chunk-end
  `(noise "@\n"))
@

@[stage 1@]
(define (parse-contents contents)
  (let ((parser (*parser mweb-stage-1)))
    (vector->list (parser (string->parser-buffer contents)))))
@

@[stage 1@]
(define (extract-code-chunks parsed-contents)
  (let ((hash-table (make-string-hash-table)))
    (for-each (lambda (chunk)
		(let* ((title (car chunk))
		       (contents (cadr chunk))
		       (contents-extracted
			(hash-table-ref hash-table title (lambda () ""))))
		  (hash-table-set! hash-table title
				  (string-append contents-extracted contents))))
	      parsed-contents)
    hash-table))
@

@[stage 1@]
(define root-node "stage 2")
(define-*matcher-macro normal-code
  `(+ (alt (not-char #\@)
	   (seq #\@ (not-char #\{)))))

(define-*parser-macro node-contents
  `(* (alt (match normal-code)
	   (map (lambda (node) (tangle-node nodes node)) reference))))

(define-*parser-macro reference
  `(seq (noise (seq #\@ #\{ spaces))
	(match name)
	(noise (seq spaces #\@ #\}))))

(define (tangle-node nodes node)
  (let ((node-contents (hash-table-ref nodes node (lambda () "")))
	(parser (*parser node-contents)))
    (fold-right string-append "" (vector->list (parser (string->parser-buffer node-contents))))))

(define (combine nodes)
  (tangle-node nodes root-node))
@

@[stage 1@]
(define (tangle-file file node)
  (tangle-node (extract-code-chunks
		(parse-contents
		 (get-contents file)))
	       node))
@
