# MWEB(prototype)

The previous work gives an overview of _Literate Programming_, but lacks of
another critical part for a complete literate programming system.  We will
fill this blank in this section to build a complete system, and introduce
_MWEB_'s innovation to _Literate Programming_.

Having a knowledge of how _MWEB_ dealing with _.mw_ files at first might help
understanding following contents.  _MWEB(prototype)_ is designed consisting of
three phases of processing: first, preprocessing, synonymous to _C_'s; second,
declarative part's parsing; third, imperative part's executing.

Preprocessing, as you have met in _C_'s preprocessor, do a similar job,
in _MWEB(prototype)_, I only add one directive in this phase,
```
	@@i file [file1] [file2] ...
```
to include file, as same as _C_'s _#include_.  This instruction must be put at first of
a line, all preprocessing instruction should be in this way.  It can be used
anywhere, to include anything textual.

The following two phases are a little confussing, let me explain why I take
such an approach.  You might have heard of imperative or declarative
programming, I use these two words in the same means.  The _stage 0_ and _stage 1_
only deal with declarative statements, all works they do is parsing _.mw_ file's
description of code chunks, and do boot next stage by code hardcoded
into their source code.  I let the imperative hardcoded code exposed to users
of _MWEB(prototype)_, and do not give any wrapper on them, users must use
_MIT-Scheme_ to write this part of code.  The reason for this approach is that
although declarative code is expressive, using it to replace all actions
that _MWEB_ might take will require a lot of energy in definition of grammar,
and impose stress on users(they should follow me if I made any change on specification),
it's not ideal for both develpment and using of a prototype.  So I keep a few
declarative statements to express the spirit of _MWEB_, and put the remaining
miscellaneous on the imperative part.

The declarative part's grammar is similar to _stage 0_ and _stage 1_ but with
some extensions, which will be explained later.

The whole program is divided to several parts.
@[mweb prototype@]
@{dependencies@}
@{macros@}
@{procedures@}
@{constants@}
@{variables@}
@{initialization@}
@

## Basic Objects and Parsing

Some basic objects should be defined at starting, this topic focus on how do _MWEB(prototype)_
represent file's content.  We should redesign these basic objects, because _MWEB(prototype)_
is supposed to be used in a lot of situations despite it's a prototype.  We used to represent
whole content of a file as a string, but in order to do preprocess, a new type is used.
@[procedures@]
(define (file->lines file)
  (let ((number 0))
    (map (lambda (l) (set! number (+ number 1)) (list l number file))
         @{lines read from |file|@})))
@

Every line is labeled with line number and file name.
@[procedures@]
(define (line-text line) (car line))
(define (line-number line) (cadr line))
(define (line-file line) (caddr line))
@

@[lines read from |file|@]
(call-with-input-file file
  (lambda (port)
    @{lines read from |port|@}))
@

@[lines read from |port|@]
(letrec
  ((get-lines (lambda ()
	        (let ((line (read-line port)))
	          (if (eof-object? line)
		      '()
		      (cons line (get-lines)))))))
  (get-lines))
@

Instead of preserving the meaning of _content_, I use _text_ to stress that the content is textual.
@[procedures@]
(define (lines->text lines)
  (apply string-append
    (map (lambda (line) (string-append (line-text line) "\n")) lines)))
@

Like _stage 1_, we use _MIT scheme_'s parsing library.
@[dependencies@]
(load-option '*parser)
@

But unlike _stage 1_, _MWEB(prototype)_ parse file line by line for a better user experience.
@[procedures@]
(define (line->buffer line) (string->parser-buffer (line-text line)))
@

Some general matcher and parser macros are defined here.
@[constants@]
(define char-set:non-whitespace (char-set-invert char-set:whitespace))
(define char-set:all (char-set-union char-set:non-whitespace char-set:whitespace))
@

In some cases, spaces should be ignored.
@[macros@]
(define-*matcher-macro space '(char-set char-set:whitespace))
(define-*matcher-macro spaces '(+ space))
(define-*parser-macro skip-spaces '(noise (alt (seq) (spaces))))
@

_MWEB(prototype)_'s parsing process is very simple, parterns can be generalized to:
@[macros@]
(define-*parser-macro (parse-element label parse)
  `(encapsulate (lambda (v) (cons ,label (vector->list v))) ,parse))
@
Parsed information consists of two parts, a label and a list of values.
@[procedures@]
(define (info-label info) (car info))
(define (info-value info) (cdr info))
@

## Preprocess

We have only one kind of preprocessing by now, including.  First, define its grammar.

File names can contain any character other than _"_.
@[constants@]
(define char-set:normal-file-name (char-set-difference char-set:non-whitespace (char-set #\")))
(define char-set:quoted-file-name (char-set-union char-set:normal-file-name char-set:whitespace))
@

There are three basic elements:
@[macros@]
(define-*matcher-macro include-directive '(seq #\@ #\i))
(define-*matcher-macro file-name '(+ (char-set char-set:normal-file-name)))
(define-*matcher-macro file-name-quoted '(+ (char-set char-set:quoted-file_name)))
@
_@@i_ directive accepts file names containing blanks, but you should quote them.

We parse an include directive to get a list of file names to include.
@[macros@]
(define-*parser-macro parse-include-directive
  '(parse-element 'include (seq (noise include-directive) @{parsing file names@})))
@

The directive can accept zero file names.  _(noise spces)_ rather than _skip-spaces_ here,
because we need exactly some spaces between _@@i_ and first file name.
@[parsing file names@]
(* (seq (noise spaces) 
        (alt (match file-name)
             (seq (noise #\") (match file-name-quoted) (noise #\")))))
@

We might add new directives for preprocessing in future, I prefer keeping the space for extension.
@[macros@]
(define-*parser-macro parse-preprocess-directive
  '(alt @{preprocess directives@} (values '())))
@

@[procedures@]
(define (preprocess-directive-type directive) (car directive))
(define (preprocess-directive-args directive) (cdr directive))
@

We only have _@@i_ now.
@[preprocess directives@]
parse-include-directive
@

@[procedures@]
(define (preprocess lines)
  (letrec ((parser (*parser parse-preprocess-directive))
           (iter @{iterator for preprocessing@}))
    (iter lines '())))
@

@[iterator for preprocessing@]
(lambda (input output)
  (if (null? input)
      output
      (let* ((line (car input))
             (buffer (line->buffer line))
             (result (vector-ref (parser buffer) 0)))
	(if (null? result)
	    (iter (cdr input) (append output (list line)))
	    (case (preprocess-directive-type result)
	      @{execution of preprocess directives@})))))

@

@[execution of preprocess directives@]
((include)
 (let ((files (preprocess-directive-args result)))
      (iter (cdr input)
            (fold (lambda (a s) (append s a)) output
	      (map (lambda (f) (preprocess (file->lines f))) files)))))
@

## Declarative Part

What we have built in _stage 1_ is which I call _Classic Literate Programming_.
From now on, we are going to attach types to code chunks, not only names.
And this is the main innovation of MWEB.

Besides this, I also add cross-referencing to _MWEB(prototype)_.

We have to introduce new grammar for type declaration.
```
	@@[code chunk name@@:type@@]
	contents
	@@d identifier1 identifier2 ...
	@@d identifierA identifierB ...
	...
	@@
```
@@d means _define_.  Both ways can be used to end a code chunk, but @@ should not be used before @@d.

Code chunk name and type name are of same type, I call them _mweb-identifier_.  They act a same role
as identifier in programming languages, so, identifer of _MWEB_.
@[constants@]
(define char-set:mweb-identifier (char-set-invert (char-set #\@)))
(define char-set:mweb-identifier-head
  (char-set-difference char-set:mweb-identifier char-set:whitespace))
(define char-set:mweb-identifier-tail
  (char-set-difference char-set:mweb-identifier char-set:whitespace))
@

@[macros@]
(define-*matcher-macro mweb-identifier
  '(seq (char-set char-set:mweb-identifier-head)
        (? (seq (* (char-set char-set:mweb-identifier))
	        (char-set char-set:mweb-identifier-tail)))))
@

As for the text pattern,
```
	@@[code chunk name@@:type@@]
```
or,
```
	@@[code chunk name@@]
```
is supposed to be used elsewhere too, so I name it without lossing of generality.

@[macros@]
(define-*matcher-macro mweb-reference-start-directive '(seq #\@ #\[))
(define-*matcher-macro mweb-reference-end-directive '(seq #\@ #\]))
(define-*matcher-macro mweb-reference-type-seperate-directive '(seq #\@ #\:))
@

@[macros@]
(define-*parser-macro (parse-mweb-reference label)
  `(parse-element ,label
    (seq (noise mweb-reference-start-directive)
	 skip-spaces
	 (match mweb-identifier)
	 skip-spaces
	 @{parsing type identifier@}
	 (noise mweb-reference-end-directive))))
@

If there's no type specified, use type "plain text" as default.
@[parsing type identifier@]
(alt (seq (noise mweb-reference-type-seperate-directive)
          skip-spaces
          (match mweb-identifier)
          skip-spaces)
     (values "plain text"))
@

Despite what the context of _mweb-reference_'s using, all _mweb-reference_s contain a name and a type.
@[procedures@]
(define (mweb-reference-name mweb-ref) (car (info-value mweb-ref)))
(define (mweb-reference-type mweb-ref) (cadr (info-value mweb-ref)))
@

Here is normal identifier, identifiers are like file names in preprocessing, but without quoted form
for nearly no programming language allowing using blanks in their identifiers(_Scheme_ allows though).
@[constants@]
(define char-set:identifier char-set:non-whitespace)
@

@[macros@]
(define-*matcher-macro identifier '(+ (char-set char-set:identifier)))
(define-*matcher-macro define-directive '(seq #\@ #\d))
@

@[macros@]
(define-*parser-macro parse-defining
  '(parse-element 'defining
    (seq (noise define-directive)
         (* (seq (noise spaces) (match identifier))))))
@

@[procedures@]
(define defining-identifiers info-value)
@

Having introduced new grammar, let's look at content to be parsed in a whole.
A complete _MWEB_ source file contains, as we have seen in _stage 1_, explanatory text
and code chunks.  The difference is, we use a line by line parsing strategy now,
so we can extract useful information in a narrower range.

Any line not containing @@ at head can be accept as explanatory text.
@[macros@]
(define-*parser-macro parse-essay-line
  '(parse-element 'essay-line
    (match (alt (seq (not-char #\@) (* (char-set char-set:all)))
		(seq "@@" (* (char-set char-set:all)))
                (end-of-input)))))
@

@[macros@]
(define-*parser-macro parse-code-chunk-start-line '(parse-mweb-reference 'start-line))
@

@[macros@]
(define-*parser-macro parse-code-chunk-content-line
  '(parse-element 'content-line
    (match (alt (seq (not-char #\@) (* (char-set char-set:all)))
	        (seq #\@ (not-char #\d) (* (char-set char-set:all)))
		(end-of-input)))))
@

@[macros@]
(define-*parser-macro parse-code-chunk-end-line
  '(parse-element 'end-line
    (alt parse-defining
	 @{parsing end line@})))
@

@[parsing end line@]
(parse-element 'end (seq (noise #\@) skip-spaces (match (end-of-input))))
@

@[procedures@]
(define (parse-lines lines)
  (letrec ((context 'essay)
           (parse-line @{parse a line according to |context|@}))
    (map @{attach parsed information@} lines)))
@

@[attach parsed information@]
(lambda (line) (cons (parse-line line) line))
@

We introduced new data type above.
@[procedures@]
(define (parsed-line-info parsed-line) (car parsed-line))
(define (parsed-line-origin parsed-line) (cdr parsed-line))
(define (parsed-line-type parsed-line) (info-label (parsed-line-info parsed-line)))

(define (is-essay-line? parsed-line) (eq? (parsed-line-type parsed-line) 'essay-line))
@

Another class of procedures of same kind.
@[procedures@]
(define (start-line-name parsed-line) (mweb-reference-name (parsed-line-info parsed-line)))
(define (start-line-type parsed-line) (mweb-reference-type (parsed-line-info parsed-line)))

(define (end-line-type parsed-line) (info-label (info-value (parsed-line-info parsed-line))))
(define (end-line-identifiers parsed-line) (defining-identifiers (info-value (parsed-line-info parsed-line))))
@

@[parse a line according to |context|@]
(lambda (line)
  (let ((buffer (line->buffer line)))
    (case context
      ((essay) @{parse |buffer| in essay context@})
      ((code-start) @{parse |buffer| in code-start context@})
      ((code-content) @{parse |buffer| in code-content context@})
      ((code-end) @{parse |buffer| in code-end context@}))))
@

We might meet problems when the input file was ill-formed, so some error message is helpful.
@[procedures@]
(define (error-in-parsing-lines expect line)
  (error
    (string-append
      "Parsing of " (line-file line)
      " failed at line " (number->string (line-number line))
      ": \"" (line-text line) "\"\n"
      "expect: " expect)))
@

@[parse |buffer| in essay context@]
(let* ((parser (*parser parse-essay-line))
       (result (parser buffer)))
  (if result
      (vector-ref result 0)
      (begin
        (set! context 'code-start)
	(parse-line line))))
@

@[parse |buffer| in code-start context@]
(let* ((parser (*parser parse-code-chunk-start-line))
       (result (parser buffer)))
  (if result
      (begin
	(set! context 'code-content)
        (vector-ref result 0))
      (error-in-parsing-lines "starting of code chunk" line)))
@

@[parse |buffer| in code-content context@]
(let* ((parser (*parser parse-code-chunk-content-line))
       (result (parser buffer)))
  (if result
      (vector-ref result 0)
      (begin
        (set! context 'code-end)
	(parse-line line))))
@

@[parse |buffer| in code-end context@]
(let* ((parser (*parser parse-code-chunk-end-line))
       (result (parser buffer)))
  (if result
      (vector-ref result 0)
      (begin
        (set! context 'essay)
	(parse-line line))))
@

Related lines can be combined to a section.
@[procedures@]
(define (parsed-lines->sections parsed-lines)
  (let ((head-attached
          (reverse (map reverse
		        (fold @{gather a line@} '((((essay-line start)))) parsed-lines)))))
    (if (eq? (length (car head-attached)) 1)
        (cdr head-attached)
	(cons (cdr (car head-attached)) (cdr head-attached)))))
@

@[gather a line@]
(lambda (parsed-line gathered)
  (let ((p1 (is-essay-line? parsed-line))
        (p2 (is-essay-line? (caar gathered))))
    (if (or (and p1 p2) (and (not p1) (not p2)))
        (cons (cons parsed-line (car gathered)) (cdr gathered))
        (cons (list parsed-line) gathered))))
@

@[procedures@]
(define (section-type section)
  (case (parsed-line-type (car section))
    ((essay-line) 'essay)
    ((start-line) 'code)))
@

@[procedures@]
(define (section-text section)
  (lines->text (map parsed-line-origin section)))

(define essay-text section-text)

(define (code-chunk-type code-chunk) (start-line-type (car code-chunk)))
(define (code-chunk-name code-chunk) (start-line-name (car code-chunk)))
(define (code-chunk-text code-chunk)
  (section-text
    (filter (lambda (pl) (eq? (parsed-line-type pl) 'content-line)) code-chunk)))
(define (code-chunk-defined-identifiers code-chunk)
  (fold @{gather identifiers@} '() code-chunk))

(define (is-essay? section) (eq? (section-type section) 'essay))
(define (is-code-chunk? section) (eq? (section-type section) 'code))
@

@[gather identifiers@]
(lambda (parsed-line gathered)
  (if (and (eq? (parsed-line-type parsed-line) 'end-line)
           (eq? (end-line-type parsed-line) 'definitions))
      (append gathered (end-line-identifiers parsed-line))))
@

End this section with a procedure combining all these stuffs.
@[procedures@]
(define (parse file)
  (parsed-lines->sections (parse-lines (preprocess (file->lines file)))))
@

## Imperative Part

As I have explained, _MWEB(prototype)_ itself is just a markup language,
you mark code chunks with name and type, then you should run some code to
handle these materials.  The code to be run is also marked by _MWEB(prototype)_,
so you can refer it by using code chunk name as same as other code chunks.

I will use another programming style instead of functional programming in this part,
mainly message passing(also called object oriented).

@[procedures@]
(define (mweb file exec)
  (let ((sections (parse file))
	@{variables of procedure |mweb|@})
    @{initialization of procedure |mweb|@}
    @{run |exec|@}))
@

As we have met in _stage 1_, we usually use _node_ rather than _code chunk_ to think about code.
@[variables of procedure |mweb|@]
(nodes (make-string-hash-table))
@

A node is simply a list of code chunks with a same name, the default type is the type of
first code chunk appeared.
@[procedures@]
(define (make-node type)
  (let ((code-chunks '()))
    (lambda (msg . args)
      (case msg
        ((chunks) code-chunks)
	((type) type)
	((new-chunk) (set! code-chunks (append code-chunks args)))
	((change-type) (set! type (car args)))))))
@

@[initialization of procedure |mweb|@]
(for-each @{push code chunk into |nodes|@} (filter is-code-chunk? sections))
@

@[push code chunk into |nodes|@]
(lambda (code-chunk)
  (let* ((name (code-chunk-name code-chunk))
	 (type (code-chunk-type code-chunk))
         (node (hash-table-ref nodes name @{initialize a new node with |type|@})))
    (node 'new-chunk code-chunk)))
@

@[initialize a new node with |type|@]
(lambda ()
  (let ((new-node (make-node type)))
    (hash-table-set! nodes name new-node)
    new-node))
@

@[procedures@]
(define (search-for-node node-name nodes)
  (hash-table-ref nodes node-name (lambda () (error "Can not find node " node-name))))
@

_exec_ is a normal code chunk name, _MWEB(prototype)_ create a specified environment
and load the corresponding code to it.
@[run |exec|@]
(let ((user-space (make-top-level-environment @{bindings for |user-space|@})))
  (load @{tangle to get |exec|@} user-space))
@

@[bindings for |user-space|@]
'(@{names of bindings for |user-space|@})
(list @{values of bindings for |user-space|@})
@

### Tangle

Here we met a trouble, we should load _exec_ first to have a knowledage of types to do tangle,
but to load _exec_, we should tangle it first.  I solve it by giving a definition to "plain text" type,
so _exec_ should be written using "plain text" only.

A type's definition consists of two parts, how to convert it to other types, and how to accept
content of same type.  The previous is understandable, but the later seems unusual.
For example, _Python_ code needs indentation to form structure of program, so if we just
insert content byte by byte, then we probably get a broken program at last.  This problem
can not be solved in converting process, because code chunks have no knowledge of where they
will be inserted.

But before we give definition to "plain text", we build a framework for later extension of types.
Relations between types can be recorded in a directed graph, I use a hash table to implement it.
@[variables of procedure |mweb|@]
(relations (make-string-hash-table))
@

To gain universality, _MWEB(prototype)_'s conversion of types is based on files.  _content_ does not
only mean textual content, but any binary content.
@[procedures@]
(define (content->reference content)
  (let ((reference (bytevector->hexadecimal (md5-bytevector content))))
    (call-with-binary-output-file reference
      (lambda (port)
        (write-bytevector content port)))
    reference))

(define (reference->content reference)
  (call-with-binary-input-file reference
    (lambda (port)
      (read-bytevector (expt 2 20) port)))) ; 1MB is enough, I think
@

Some auxiliary procedures.
@[procedures@]
(define (combine-references references)
  (content->reference
    (apply bytevector-append (map reference->content references))))

(define (content->text content)
  (utf8->string content))

(define (reference->text reference)
  (content->text (reference->content reference)))

(define (text->content text)
  (string->utf8 text))

(define (text->reference text)
  (content->reference (text->content text)))

(define (file->reference file)
  (content->reference (reference->content file)))
@

One of core procedures of _MWEB_, search _relations_ to convert content of _reference_
from _type-from_ to _type-to_.
@[procedures@]
(define (convert-to relations reference type-from type-to)
  (let ((convert-method ((hash-table-ref relations type-from) 'select type-to)))
    (if convert-method
        (convert-method reference)
	(error "Failed at converting"
	       type-from
	       (error-irritant/noise " to")
	       type-to))))
@

The values in _relations_ use message passing strategy.
@[procedures@]
(define (make-type-selector relations type)
  (let ((targets `((,type ,(lambda (ref) ref)))))
    (lambda (msg . args)
      (case msg
        ((new-target) (set! targets (cons args targets)))
        ((select) (let ((target-type (car args)))
		    @{build convert method for target-type@}))))))
@

If you want to use a type, you must declare it first.
@[procedures@]
(define (new-types relations . types)
  (for-each (lambda (type) (hash-table-set! relations type (make-type-selector relations type))) types))
@

To convert type1 to type2, _MWEB(prototype)_ allows using some types as medium.  It means that
type1 might be converted to typeA first, then typeB, typeC, etc, at last type2.  But _MWEB(prototype)_
assumes that there's only one route starting from type1, ending at type2.  Also, no loop is permitted.
@[build convert method for target-type@]
(let ((target (assoc target-type targets)))
  (if target
      (cadr target)
      @{search for indirect conversion@}))
@

@[search for indirect conversion@]
(let ((methods @{search methods under |targets| for indirect conversion to |target-type|@}))
  (case (length methods)
    ((1) (car methods))
    ((0) #f)
    (else (error "More than one path"
                 (error-irritant/noise " converting from type ")
                 type
	         (error-irritant/noise " to ")
	         target-type))))
@
There are two kinds of possible type, some types this _type_ can convert to and
the type itself.  The indirect conversion does not go througn the type itself.
@[search methods under |targets| for indirect conversion to |target-type|@]
(filter procedure?
  (map (lambda (t)
         (if (equal? (car t) type)
	     #f
	     @{construct conversion from |type| to |target-type|@}))
       targets))
@

@[construct conversion from |type| to |target-type|@]
(let ((next ((hash-table-ref relations (car t)) 'select target-type)))
  (if next
      (lambda (ref) (next ((cadr t) ref)))
      #f))
@

@[procedures@]
(define (set-relation! relations type-from type-to method)
  (let ((selector (hash-table-ref relations type-from)))
    (selector 'new-target type-to method)))
@

So "plain text" can be defined as:
@[initialization of procedure |mweb|@]
(hash-table-set! relations "plain text"
  (lambda (msg . args)
    (case msg
      ((new-target) (error "plain text type can not be modified"))
      ((select) (lambda (ref) ref)))))
@
As you can see, "plain text" does none thing, it's a special type that can convert to any type.

Also the accepting part, implemented by hash table too.  It's much simpler, for any type only
cares about its own identity's maintenance.  But because most types do not have to do anything
special to do this, I specify a default behaviour for it.
@[variables of procedure |mweb|@]
(identities (make-string-hash-table))
@

@[procedures@]
(define (accept identities recipient reference type)
  (let ((method (hash-table-ref identities type
                  (lambda () (lambda (recipient reference) (reference->text reference))))))
    (method recipient reference)))
@

@[procedures@]
(define (set-identity! identities type method)
  (hash-table-set! identities type method))
@

Then we begin to build _tangle_.  It requires defining new grammar used in code chunks.
I will introduce another important extension here.

You can reference and import other code chunks by:
```
	@@{code chunk A@@}
```
or just reference:
```
	@@[code chunk B @@: type@@]
```

You have seen the first in _stage 1_, the second is something new.  As said above,
_MWEB(prototype)_'s type converstion is based on files, you can simply regard these
code chunks as files in normal project. And the second type of referencing is just
the file name of corresponding code chunk.  Where should I use it?  Well, for example,
you can define a type called "C program", it may be:
```
	@@[hello world program @@: C program@@]
	module: @@[main @@: C module@@]
	@@

	@@[main @@: C code with basic I/O@@]
	int main() { printf("Hello World!\n"); }
	@@
```
If you complete all definition of types, _MWEB(prototype)_ will invoke something appropriate
to handle this code chunk, compile and link specified C code and get an executable file
which print "Hello World!".

The "C module" in this example forces the conversion from type "C code with basic I/O" to "C module",
for "C program" type might expect compiled object files here. This conversion may contain "C code" as media.

Now, let's continue.

@[macros@]
(define-*matcher-macro normal-code-content '(+ (not-char #\@)))
(define-*matcher-macro import-start-directive '(seq #\@ #\{))
(define-*matcher-macro import-end-directive '(seq #\@ #\}))

(define-*parser-macro parse-code-chunk
  '(encapsulate vector->list
     (* (alt @{parse normal code content@}
             @{parse reference@}
  	     @{parse import@}))))
@

@[parse normal code content@]
(parse-element 'normal-content
  (encapsulate (lambda (v) (apply string-append (vector->list v)))
    (+ (alt (match normal-code-content)
            (map (lambda (e) "@") (match "@@"))))))
@

@[parse reference@]
(parse-mweb-reference 'reference)
@

@[parse import@]
(parse-element 'import
  (seq (noise import-start-directive)
       skip-spaces
       (match mweb-identifier)
       skip-spaces
       (noise import-end-directive)))
@

@[procedures@]
(define (tangle-node node nodes relations identities)
  (combine-references (map (lambda (chunk) (tangle-chunk chunk nodes relations identities)) (node 'chunks))))
@

@[tangle to get |exec|@]
(tangle-node (search-for-node exec nodes) nodes relations identities)
@

@[procedures@]
(define (tangle-chunk chunk nodes relations identities)
  (let* ((text (code-chunk-text chunk))
         (parsed (vector-ref ((*parser parse-code-chunk) (string->parser-buffer text)) 0)))
    (text->reference
      (apply string-append (map @{import or reference other node@} parsed)))))
@

@[import or reference other node@]
(lambda (info)
  (case (info-label info)
    ((normal-content) (car (info-value info)))
    ((import)
      (let ((node (search-for-node (car (info-value info)) nodes)))
        @{import |node|@}))
    ((reference)
      (let ((node (search-for-node (car (info-value info)) nodes))
            (type (cadr (info-value info))))
	@{get reference of |node| and convert it to |type|@}))))
@

@[import |node|@]
(accept identities
        (cons parsed info)
        (convert-to relations (tangle-node node nodes relations identities) (node 'type) (code-chunk-type chunk))
        (code-chunk-type chunk))
@

@[get reference of |node| and convert it to |type|@]
(convert-to relations (tangle-node node nodes relations identities) (node 'type) type)
@

### Weave

_weave_ in _MWEB(prototype)_ is not special at all, users have access to all parsed information,
and can write _weave_ themselves.  So the major part of _weave_ will be put in User Space.
What I will do in this section is giving a pretty wrapper on these information.

@[procedures@]
(define (make-section section)
  (let ((type (section-type section)))
    (case type
      ((code) (make-code-section section))
      ((essay) (make-essay-section section)))))

(define (make-code-section section)
  (let ((type 'code)
	(code-name (code-chunk-name section))
	(code-type (code-chunk-type section))
        (code-text (code-chunk-text section))
	(identifiers (code-chunk-defined-identifiers section)))
    (lambda (msg . args)
      (case msg
	((type) type)
        ((code-name) code-name)
	((code-type) code-type)
	((code-text) code-text)
	((identifiers) identifiers)))))

(define (make-essay-section section)
  (let ((type 'essay)
        (content (essay-text section)))
    (lambda (msg . args)
      (case msg
	((type) type)
        ((content) content)))))
@

## User Space

This section defines _exec_'s execution environment.  Although _MWEB(prototype)_'s users
are supposed to read source code of _MWEB(prototype)_ to have an overall knowledge
of whole system, there's no need to expose all identifiers defined above.

Let's think of what users are going to do in User Space one by one, build corresponding
environment for these actions.

First, they are going to define types, and set relations between them.  This is the core part
of _MWEB_ after all.
@[names of bindings for |user-space|@]
mweb-type mweb-new-relation mweb-search-type
@
@[values of bindings for |user-space|@]
(lambda types
  (apply new-types (cons relations types)))
(lambda (type-from type-to method)
  (set-relation! relations type-from type-to method))
(lambda (node-name)
  ((search-for-node node-name nodes) 'type))
@
As an extension, they may want to change a node's type.
@[names of bindings for |user-space|@]
mweb-change-type
@
@[values of bindings for |user-space|@]
(lambda (node-name new-type)
  ((search-for-node node-name nodes) 'change-type new-type))
@

Then, they ought to be able to define converting methods.  This require them being familiar with
concept of reference, content and text.  But usually, user do not want to handle binary content
in context of _MIT Scheme_, so what they really want is reference and text.
@[names of bindings for |user-space|@]
reference->content content->reference file->reference
mweb-convert-to
@
@[values of bindings for |user-space|@]
reference->text text->reference file->reference
(lambda (reference type-from type-to)
  (convert-to relations reference type-from type-to))
@

And most importantly, they should be able to tangle something.
@[names of bindings for |user-space|@]
mweb-tangle
@
@[values of bindings for |user-space|@]
(lambda (node-name)
  (tangle-node (search-for-node node-name nodes) nodes relations identities))
@

