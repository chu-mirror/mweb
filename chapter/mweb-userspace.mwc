# MWEB(prototype) User Space

ALl users of _MWEB(prototype)_ are able to implement their own user space, the following is
my implementation.

@[user space@]
@{dependencies of user space@}
@{procedures of user space@}
@{initialization of user space@}
@

In most cases, what we want is not merely tangling a node, but also converting that node to
another type, for example, if you wrote a C program, tangled the node of that C program's
source code, you could get is a C source file, rather than an executable file.
@[procedures of user space@]
(define (tangle-as node-name type)
  (mweb-convert-to (mweb-tangle node-name) (mweb-search-type node-name) type))
@

A lot of convertings are delegated to other programs.
@[dependencies of user space@]
(load-option 'synchronous-subprocess)
@

## Types

### C code

Some definitions of types related to C programming language.
@[initialization of user space@]
(mweb-type "C Module with Basic I/O" "C Module" "C Source"
  "C Program" "Shell Script" "Side Effect" "Executable")
(mweb-new-relation "C Module with Basic I/O" "C Module"
  (lambda (ref) @{add standard I/O header file to |ref|@}))
(mweb-new-relation "C Module" "C Source"
  (lambda (ref) ref))
(mweb-new-relation "C Program" "Shell Script"
  (lambda (ref) @{extend |ref| to compiling script@}))
(mweb-new-relation "Shell Script" "Side Effect"
  (lambda (ref) (run-shell-command (string-append "sh " ref)) ref))
(mweb-new-relation "Side Effect" "Executable"
  (lambda (ref) ref))
@

@[add standard I/O header file to |ref|@]
(content->reference
  (string-append "#include <stdio.h>\n"
                 (reference->content ref)))
@

@[extend |ref| to compiling script@]
(content->reference
  (string-append "#!/bin/sh\n"
                 (reference->content ref) "\n"
		 "for f in $IN; do cp $f $f.c; INFILES=\"$INFILES $f.c\"; done\n"
		 "gcc $CFLAGS -o $OUT $INFILES"))
@

